name: C++ CI for Webview project

on: [push, pull_request]

jobs:
  build-linux:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          g++ \
          ninja-build \
          libx11-dev \
          libx11-xcb-dev \
          libxcb1-dev \
          libxcomposite-dev \
          libxcursor-dev \
          libxdamage-dev \
          libxext-dev \
          libxi-dev \
          libxrandr-dev \
          libxss-dev \
          libxtst-dev

    - name: Configure CMake
      run: |
        cmake -B build -S . \
          -DCMAKE_BUILD_TYPE=Release \
          -G Ninja

    - name: Build
      run: cmake --build build

    - name: Run tests (if any)
      run: |
        cd build
        ctest --output-on-failure || true

  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up MSVC (Visual Studio 2022)
        uses: microsoft/setup-msbuild@v1  # Sets up MSBuild and MSVC tools

      - name: Install CMake (if not already in PATH)
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' --yes

      - name: Configure CMake (using Visual Studio generator)
        run: cmake -B build -S . -DCMAKE_BUILD_TYPE=Release -G "Visual Studio 17 2022"

      - name: Build with MSBuild (instead of Ninja)
        run: |
          cmake --build build --config Release

      - name: Run tests (if any)
        run: |
          cd build
          ctest --output-on-failure || exit 0

  build-macos:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install system dependencies
        run: |
          brew install cmake ninja llvm
          echo "LLVM installed at: $(brew --prefix llvm)"

      - name: Configure CMake
        run: |
          export PATH="$(brew --prefix llvm)/bin:$PATH"
          export CC=clang
          export CXX=clang++
          cmake -B build -S . \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_FLAGS="-Wno-error=typedef-redefinition" \
            -DCMAKE_CXX_FLAGS="-Wno-error=typedef-redefinition" \
            -G Ninja

      - name: Build
        run: cmake --build build

      - name: Run tests
        run: |
          cd build
          ctest --output-on-failure || true